name: Deploy to EC2

on:
  push:
    branches:
      - main

jobs:
  build:
    runs-on: ubuntu-latest
    env:
      MY_DATA_SOURCE: ${{ secrets.DATA_SOURCE }}
      MY_DATA_USERNAME: ${{ secrets.DATA_USER }}
      MY_DATA_PASSWORD: ${{ secrets.DATA_PWD }}

    steps:  # 저장소에서 코드 가져오기
      - name: source code checkout
        uses: actions/checkout@v4

      - name: JDK 17 설치
        uses: actions/setup-java@v4
        with:
          java-version: 17 # java 버전 설정
          distribution: 'temurin' # java 배포판 설정

#      - name: application.yaml 파일 생성하기
#        run:
#          echo "${{ secrets.APPLICATION_YAML }}" > src/main/resources/application.yaml

      - name: application build # gradle로 빌드하기
        run: |
          chmod +x ./gradlew
          ./gradlew clean build

      - name: docker 이미지 생성 & tag 붙이기
        run: docker build -t ${{ secrets.DOCKER_USER }}/web-app:latest .

      - name: dockerhub login # 도커허브로 로그인하기
        uses: docker/login-action@v3
        with:
          username: ${{ secrets.DOCKER_USER }}
          password: ${{ secrets.DOCKER_ACCESS_TOKEN }}

      - name: dockerhub에 생성한 이미지 푸쉬하기
        run: docker push ${{ secrets.DOCKER_USER }}/web-app:latest

  deploy:
    runs-on: ubuntu-latest
    needs: build # build 먼저 하고 실행되도록

    steps: # ec2 접속
      - name: ssh로 ec2 접속
        uses: appleboy/ssh-action@v1.0.3
        with:
          host: ${{ secrets.EC2_HOST }}
          username: ${{ secrets.EC2_USERNAME }}
          key: ${{ secrets.EC2_PRIVATE_KEY }}
          script_stop: true
          script: |
            # dockerhub 에 토큰을 가지고 로그인
            echo "${{ secrets.DOCKER_ACCESS_TOKEN }}" | docker login -u ${{ secrets.DOCKER_USER }} --password-stdin
            # docker 이미지 풀
            docker pull ${{ secrets.DOCKER_USER }}/web-app:latest
            # 기존 컨테이너 중지 & 삭제
            docker stop web-app || true
            docker rm web-app || true
            sudo fuser -k -n tcp 8080 || true
            # 새로운 컨테이너 실행
            docker run -d -p 8080:8080 --name web-app --network=mynet \
            -e MY_DATA_SOURCE=${{ secrets.DATA_SOURCE }} \
            -e MY_DATA_USERNAME=${{ secrets.DATA_USER }} \
            -e MY_DATA_PASSWORD=${{ secrets.DATA_PWD }} \
            ${{ secrets.DOCKER_USER }}/web-app:latest
            docker run -d -p 8080:8080 --name web-app ${{ secrets.DOCKER_USER }}/web-app:latest

